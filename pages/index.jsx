import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '../styles/Home.module.css'
const inter = Inter({ subsets: ['latin'] })

import { useState, useEffect } from 'react';
import { ProductItem } from '@/components/ProductItem'
import Button from '@/components/Button/button.component';
import BrandFilter from '@/components/BrandFilter/brand-filter.component';
import { ProductContainer } from '@/styles/home.styles';
import SortFilter from '@/components/SortFilter/sort.filter.component';
import PriceFilter from '@/components/PriceFilter/price.filter.component';
import RatingFilter from '@/components/RatingFilter/rating.filter.component';
import Spinner from '@/components/Spinner/spinner.component';

export default function Home() {
  const [products, setProducts] = useState([]);
  const [brandOptions, setBrandOptions] = useState([])
  const [filteredProducts, setFilteredProducts] = useState([]);
  const [sortOrder, setSortOrder] = useState('title');
  const [filterBrandValue, setBrandFilterValue] = useState('');
  const [priceFilterValue, setPriceFilterValue] = useState('');
  const [ratingFilterValue, setRatingFilterValue] = useState('');
  const [loading, setLoading] = useState(false);


  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/products'); 
      const data = await response.json();
      setProducts(data);
      setFilteredProducts(data);
      setLoading(false);
      const brandOptions = data.map(p => p.brand)
      const noDuplicatedBrands = [...new Set(brandOptions)];
      setBrandOptions(noDuplicatedBrands)
    } catch (error) {
      console.error('Error fetching products:', error);
    }
  };
  const applyFilters = () => {
    let filtered = [...products];
    console.log('filtered products ', filtered)
    console.log(filterBrandValue, priceFilterValue)
    // Apply brand filter if selected
    if (filterBrandValue !== '') {
      filtered = filtered.filter((product) => product.brand === filterBrandValue);
      console.log('filter', filtered)
    }

    // Apply price filter if selected
    if (priceFilterValue !== '') {
      const price = parseInt(priceFilterValue);
      filtered = filtered.filter((product) => product.price >= price);
    }

    // Apply rating filter if selected
    if (ratingFilterValue !== '') {
      const rating = parseInt(ratingFilterValue);
      filtered = filtered.filter((product) => product.rating >= rating);
    }

    setFilteredProducts(filtered);
  };
  const handleFilterChange = (e) => {
    const value = e.target.value;
    console.log(value)
    setBrandFilterValue(value);
    applyFilters();
  };
  const handleRatingFilterChange = (e) => {
    const value = e.target.value;
    setRatingFilterValue(value);
    applyFilters()
  }
  const handlePriceFilterChange = (e) => {
    console.log(e.target.value)
    const value = e.target.value;
    setPriceFilterValue(value);
    applyFilters()
  }
  const handleSortChange = (e) => {
    const value = e.target.value;
    setSortOrder(value);

    // Sort the products based on the selected value
    const sorted = [...filteredProducts].sort((a, b) => {
      switch (value) {
        case 'price-asc':
          return a.price - b.price;
          break;
        case 'price-desc':
          return b.price - a.price;
          break;
        case 'rating-asc':
          return a.rating - b.rating;
          break;
        case 'rating-desc':
          return b.rating - a.rating;
          break;
        case 'title':
          if (a.title < b.title) {
            return -1;
          }
          if (a.title > b.title) {
            return 1;
          }
          return 0;
        default:
          break;
      }
    });
    setFilteredProducts(sorted);
  };

  return (

    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <h1>Product List</h1>
      <div className={styles.filterContainer}>
        {/* <BrandFilter filterValue={filterBrandValue} brandOptions={brandOptions} handleFilterChange={handleFilterChange} />
         */}
          <div>
      <label htmlFor="filter">Filter by Brand:</label>
      <select id="filter" value={filterBrandValue} onChange={handleFilterChange}>
        <option value="">All</option>

        {brandOptions && brandOptions.map(brand => (
          <option key={brand} value={brand}>{brand}</option>
        ))}
      </select>
    </div>
        <PriceFilter priceFilterValue={priceFilterValue} handlePriceFilterChange={handlePriceFilterChange} />
        <RatingFilter ratingFilterValue={ratingFilterValue} handleRatingFilterChange={handleRatingFilterChange} />
        <SortFilter sortOrder={sortOrder} handleSortChange={handleSortChange} />
      </div>

      {loading ? <Spinner /> : (
        <>
          <ProductContainer>
            {filteredProducts.map((product) => (
              <ProductItem product={product} key={product.id} />
            ))}
          </ProductContainer>
          <Button>Load More</Button>
        </>

      )}

    </div>
  );
}
